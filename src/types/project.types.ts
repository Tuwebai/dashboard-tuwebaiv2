export interface Project {
  id: string;
  name: string;
  description?: string;
  technologies: string[];
  environment_variables?: Record<string, any>;
  status: 'development' | 'production' | 'paused' | 'maintenance';
  github_repository_url?: string;
  customicon?: string;
  created_at: string;
  updated_at: string;
  created_by?: string;
  is_active: boolean;
}

export interface CreateProjectData {
  name: string;
  description?: string;
  technologies: string[];
  environment_variables?: Record<string, any>;
  status: 'development' | 'production' | 'paused' | 'maintenance';
  github_repository_url?: string;
  customicon?: string;
}

export interface UpdateProjectData extends Partial<CreateProjectData> {
  is_active?: boolean;
}

export interface ProjectFilters {
  status?: string;
  technology?: string;
  search?: string;
  dateFrom?: string;
  dateTo?: string;
}

export interface ProjectSort {
  field: 'name' | 'status' | 'created_at' | 'updated_at';
  direction: 'asc' | 'desc';
}

export interface EnvironmentVariable {
  key: string;
  value: string;
  isSensitive: boolean;
}

// ===== SISTEMA DE VERSIONADO Y DEPLOYMENTS =====

export interface ProjectVersion {
  id: string;
  projectId: string;
  version: string;
  description: string;
  changes: ChangeLog[];
  deployedAt?: string;
  deployedBy?: string;
  // Estados mejorados del workflow
  status: 'draft' | 'in_review' | 'approved' | 'deployed' | 'failed' | 'rolled_back';
  environment: 'development' | 'staging' | 'production';
  buildNumber: number;
  commitHash?: string;
  branch?: string;
  buildLogs?: string;
  deploymentLogs?: string;
  rollbackTo?: string;
  createdAt: string;
  updatedAt: string;
  // Nuevos campos para workflow inteligente
  semanticVersion?: string; // versión semántica validada
  validationStatus?: 'pending' | 'valid' | 'invalid';
  validationErrors?: string[];
  autoGenerated?: boolean; // si fue generado automáticamente
  reviewRequestedAt?: string;
  reviewedBy?: string;
  reviewedAt?: string;
  approvalComments?: string;
  deploymentConfig?: DeploymentConfig;
  healthCheckStatus?: 'healthy' | 'unhealthy' | 'unknown';
  lastHealthCheck?: string;
}

export interface ChangeLog {
  id: string;
  type: 'feature' | 'bugfix' | 'hotfix' | 'security' | 'refactor' | 'documentation';
  title: string;
  description: string;
  author: string;
  timestamp: string;
  ticketId?: string;
  breakingChange: boolean;
  // Nuevos campos para changelog automático
  commitHash?: string;
  commitMessage?: string;
  filesChanged?: string[];
  linesAdded?: number;
  linesDeleted?: number;
  autoGenerated?: boolean;
}

export interface Deployment {
  id: string;
  versionId: string;
  projectId: string;
  environment: 'development' | 'staging' | 'production';
  status: 'pending' | 'in_progress' | 'completed' | 'failed' | 'cancelled';
  startedAt: string;
  completedAt?: string;
  deployedBy: string;
  deploymentLogs: string;
  rollbackAvailable: boolean;
  rollbackTo?: string;
  healthCheckUrl?: string;
  healthCheckStatus?: 'healthy' | 'unhealthy' | 'unknown';
  performanceMetrics?: PerformanceMetrics;
  // Nuevos campos para rollback automático
  autoRollbackTriggered?: boolean;
  rollbackReason?: string;
  rollbackTriggeredAt?: string;
  rollbackTriggeredBy?: string;
  previousVersionId?: string;
  deploymentDuration?: number; // en segundos
  failureThreshold?: number;
  successThreshold?: number;
}

export interface PerformanceMetrics {
  deploymentTime: number; // en segundos
  buildTime: number; // en segundos
  bundleSize: number; // en bytes
  loadTime: number; // en milisegundos
  errorRate: number; // porcentaje
  uptime: number; // porcentaje
}

export interface Environment {
  id: string;
  projectId: string;
  name: 'development' | 'staging' | 'production';
  displayName: string;
  description: string;
  url?: string;
  isActive: boolean;
  autoDeploy: boolean;
  branch: string;
  healthCheckUrl?: string;
  createdAt: string;
  updatedAt: string;
}

export interface DeploymentConfig {
  id: string;
  projectId: string;
  environment: 'development' | 'staging' | 'production';
  buildCommand: string;
  testCommand?: string;
  deployCommand: string;
  healthCheckPath: string;
  healthCheckTimeout: number;
  maxDeploymentTime: number;
  rollbackThreshold: number;
  notifications: NotificationConfig[];
  createdAt: string;
  updatedAt: string;
}

export interface NotificationConfig {
  type: 'email' | 'slack' | 'webhook';
  recipients: string[];
  events: ('deployment_started' | 'deployment_completed' | 'deployment_failed' | 'rollback_triggered')[];
  enabled: boolean;
}

export interface VersionFilters {
  environment?: string;
  status?: string;
  dateFrom?: string;
  dateTo?: string;
  search?: string;
}

export interface VersionSort {
  field: 'version' | 'deployedAt' | 'createdAt' | 'status';
  direction: 'asc' | 'desc';
}
